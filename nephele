#! /bin/bash

# Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -eu

source nephele.conf

cmds=("enroot" "terraform" "ansible")

case "${CLOUD_PROVIDER}" in
azure)
    cmds+=("az") ;;
esac

for cmd in "${cmds[@]}"; do
    command -v "${cmd}" > /dev/null || { echo "Could not find command: ${cmd}"; exit 1; } >&2
done

init() {
    echo "Initializing cloud provider..."
    case "${CLOUD_PROVIDER}" in
    azure)
        az login --service-principal --username "${ARM_CLIENT_ID}" --password "${ARM_CLIENT_SECRET}" --tenant "${ARM_TENANT_ID}" ;;
    esac

    pushd ssh
    echo "Generating SSH keys..."
    ./genkeys.sh
    popd

    pushd terraform
    echo "Initializing terraform..."
    terraform -chdir="${CLOUD_PROVIDER}" init
    popd

    pushd ansible
    echo "Initializing ansible..."
    ansible-galaxy collection install -f -r requirements.yml
    ansible-galaxy role install -f -r requirements.yml

    echo "Creating password..."
    read -s -r -e -p "Enter a new password for ansible vault: "
    echo "${REPLY}" > .vault-password
    popd

    echo "Building packages..."
    make -C packages all mostlyclean

    echo "Done"
}

create() {
    [ -n "${CLOUD_REGION-}" ] && export TF_VAR_region="${CLOUD_REGION}"
    [ -n "${CLOUD_ZONE-}" ] && export TF_VAR_zone="${CLOUD_ZONE}"
    export TF_VAR_replicas="{ x4v100 = ${REPLICAS_x4v100}, x8v100 = ${REPLICAS_x8v100}, x8a100 = ${REPLICAS_x8a100} }" # FIXME doesn't seem to work for some reason

    case "${1-}" in
    --yes|-y) export TF_CLI_ARGS_apply="-auto-approve" ;;
    esac

    pushd terraform
    echo "Creating ${CLOUD_PROVIDER} cluster..."
    terraform -chdir="${CLOUD_PROVIDER}" apply -parallelism="${PARALLELISM}" -var-file "../terraform.tfvars" -var replicas="${TF_VAR_replicas}"
    popd

    pushd ansible
    echo "Waiting for instances..."
    while ! ansible all -a "cloud-init status --wait"; do echo "Retrying in 10s"; sleep 10; done
    sleep 10 # wait for the reboot
    ansible all -m wait_for_connection

    echo "Bootstrapping instances..."
    ansible-playbook -f "${PARALLELISM}" playbooks/bootstrap.yml
    ansible-playbook -f "${PARALLELISM}" playbooks/nfs.yml

    echo "Uploading packages..."
    ansible -f "${PARALLELISM}" 'nfs_server[0]' -m synchronize -a "use_ssh_args=yes src=../packages/ dest=/nfs/packages/ rsync_opts=--include=*.deb,--exclude=*"

    echo "Provisioning instances..."
    ansible-playbook -f "${PARALLELISM}" playbooks/fabric.yml
    ansible-playbook -f "${PARALLELISM}" playbooks/nvidia.yml
    ansible-playbook -f "${PARALLELISM}" playbooks/containers.yml
    ansible-playbook -f "${PARALLELISM}" playbooks/slurm.yml
    popd

    echo "Done"
}

connect() {
    exec ssh -F ssh/config "${1:-login-0000}"
}

destroy() {
    [ -n "${CLOUD_REGION-}" ] && export TF_VAR_region="${CLOUD_REGION}"
    [ -n "${CLOUD_ZONE-}" ] && export TF_VAR_zone="${CLOUD_ZONE}"

    case "${1-}" in
    --yes|-y) export TF_CLI_ARGS_apply="-auto-approve" ;;
    esac

    pushd terraform
    echo "Destroying ${CLOUD_PROVIDER} cluster..."
    terraform -chdir="${CLOUD_PROVIDER}" apply -destroy -parallelism="${PARALLELISM}" -var-file "../terraform.tfvars"
    popd

    echo "Done"
}

case "${1-}" in
    init|create|connect|destroy) "$@" ;;
    *) echo "Usage: ${0##*/} init|create|connect|destroy" ;;
esac
